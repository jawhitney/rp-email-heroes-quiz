{"version":3,"file":"n-formatter.pipe.js","sourceRoot":"","sources":["../inlined/helpers/n-formatter.pipe.ts"],"names":[],"mappings":"OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe;AAGnD;IAAA;IAkCA,CAAC;IAhCC,kCAAS,GAAT,UAAU,KAAU,EAAE,IAAU;QAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED,mCAAU,GAAV,UAAW,GAAG,EAAE,MAAM;QAElB,IAAI,EAAE,GAAG;YACP,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;YAC1B,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;YAC1B,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;YAC1B,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;YACzB,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;YACzB,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;SAC1B,EAAE,EAAE,GAAG,0BAA0B,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/B,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC9E,CAAC;QACH,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;oBACnB,IAAI,EAAE,YAAY;iBACnB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAA6D,EACjF,CAAC;IACF,qBAAC;AAAD,CAAC,AAlCD,IAkCC","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n\nexport class NFormatterPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(value){\n      return this.nFormatter(value, args);\n    }\n  }\n\n  nFormatter(num, digits) {\n\n      var si = [\n        {value: 1E18, symbol: \"E\"},\n        {value: 1E15, symbol: \"P\"},\n        {value: 1E12, symbol: \"T\"},\n        {value: 1E9, symbol: \"G\"},\n        {value: 1E6, symbol: \"M\"},\n        {value: 1E3, symbol: \"K\"}\n      ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/, i;\n      for (i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n          return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n        }\n      }\n      return num.toFixed(digits).replace(rx, \"$1\");\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'nFormatter'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}